###################################################################
#
# Test suite testing multimethods
#
###################################################################

import 'io'
import 'math'
import 'utils'
import 'tinytestutils'

#
# Test objects.
#

obj1 = {
    method: {[<int>] n -> "int $n"}
    method: {n -> "not int $n"}
}

obj2 = {
    write: getcommand('write-host')
}

obj3 = {
    m: {
        x -> "m one arg $x"
    }

    m: {
        x, y -> "m two args $x $y"
    }

    m: {
        x, y, z -> "m three $x $y $z"
    }

    n: {
        [<int>] n -> "int $n"
    }

    n: {
        [<string>] n -> "string $n"
    }

    n: {
        x, y -> "arity $x $y"
    }

    o: {
        "boring"
    } 
}

accumulate = {
    strings: [];
    numbers: [];
    add: {
        [<int>] val ->

        this.numbers.Add(val)
    };
    add: {
        [<string>] val ->

        this.strings.Add(val)
    }
}

# An object that uses pattern matching to count even and odd numbers.
EvenOdd = {

    evenCount: 0

    oddCount:  0

    # Matches on even numbers
    doit: {
        {it % 2 == 0}::_ ->
            this.EvenCount += 1
            'even'
    }

    # Default fall through
    doit: {
        _ ->
            this.OddCount += 1
            "odd"
    }
}


suite 'MultiMethods' {

    test 'TypeOverLoad1' {
        test: {
            obj1.method('abc')
        }
        Expected: 'not int abc'
    }

    test 'TypeOverLoad2' {
        test: {
            obj1.method(123)
        }
        Expected: 'int 123'
    }


    test 'PipeTypeOverLoad1' {
        test: {
            'abc' |> obj1.method
        }
        Expected: 'not int abc'
    }

    test 'PipeTypeOverLoad2' {
        test: {
            123 |> obj1.method
        }
        Expected: 'int 123'
    }

Warn "Implement and test piping into commandinfo"
if (0) {
    test 'CommandInfo' { 
        test: {
            obj2.write('hi')
        }
        Expected: null
    }

    test 'CommandInfo2' {
        test: {
            [1..10] |> obj2.write
        }
        Expected: null
    }
}

    test 'ArityOverload1' {
        test: {
            obj3.m(1)
        }
        Expected: 'm one arg 1'
    }

    test 'ArityOverload2' {
        test: {
            obj3.m(1, 2)
        }
        Expected: 'm two args 1 2'
    }

    test 'ArityOverload3' {
        test: {
            obj3.m(1, 2, 3)
        }
        Expected: 'm three 1 2 3'
    }

    test 'ArityOverload4' {
        test: {
            obj3.m(1, 2, 3, 4)
        }
        Expected: null
    }

    test 'PipeArityOverload1' {
        test: {
            1 |> obj3.m
        }
        Expected: 'm one arg 1'
    }

    test 'PipeArityOverload2' {
        test: {
            1 |> obj3.m(2)
        }
        Expected: 'm two args 1 2'
    }

    test 'PipeArityOverload3' {
        test: {
            1 |> obj3.m(2, 3)
        }
        Expected: 'm three 1 2 3'
    }

    test "TypeOverArity1" {
        test: {
            obj3.n(1)
        }
        Expected: 'int 1'
    }

    test "TypeOverArity2" {
        test: {
            obj3.n("abc")
        }
        Expected: 'string abc'
    }

    test "TypeOverArity3" {
        test: {
            obj3.n(1, 2)
        }
        Expected: 'arity 1 2'
    }

    test "PipeTypeOverArity1" {
        test: {
            1 |> obj3.n
        }
        Expected: 'int 1'
    }

    test "PipeTypeOverArity2" {
        test: {
            "hello" |> obj3.n
        }
        Expected: 'string hello'
    }

    test "PipeTypeOverArity3" {
        test: {
            1 |> obj3.n(2)
        }
        Expected: 'arity 1 2'
    }

    # test single dispatch on the same object
    test "Boring" {
        test: {
            obj3.o()
        }
        Expected: 'boring'
    }

    test 'Accumulate1' {
        test: {
            accumulate.Add(1)
            accumulate.Add('a')
            accumulate.Add(2)
            accumulate.Add(3)
            accumulate.numbers
        }
        Expected: [1, 2, 3]
    }

    test 'Accumulate2' {
        test: {
            accumulate.Add('b')
            accumulate.Add('c')
            accumulate.strings
        }
        Expected: ['a', 'b', 'c']
    }

    test 'Accumulate3' {
        test: {
            'd' |> accumulate.Add
            accumulate.numbers
        }
        Expected: [1, 2, 3]
    }

    test 'Accumulate4' {
        test: {
            4 |> accumulate.add
            accumulate.strings
        }
        Expected: ['a', 'b', 'c', 'd']
    }

    test 'Accumulate5' {
        test: {
            'e' |> accumulate.Add
            accumulate.numbers
        }
        Expected: [1, 2, 3, 4]
    }

    test 'Accumulate2' {
        test: {
            accumulate.strings
        }
        Expected: ['a', 'b', 'c', 'd', 'e']
    }

    test 'EvenOdd1' {
        test: {
            EvenOdd.doit([124, 0])
        }
        expected: 'even'
    }

    test 'EvenOdd2' {
        test: {
            EvenOdd.doit([10, 0])
        }
        expected: 'even'
    }

    test 'EvenOdd3' {
        test: {
            EvenOdd.doit([11, 0])
        }
        expected: 'odd'
    }

    test 'EvenOdd4' {
        test: {
            EvenOdd.doit([12, 0])
        }
        expected: 'even'
    }

    test 'EvenOdd5' {
        test: {
            EvenOdd.doit([13, 0])
        }
        expected: 'odd'
    }

    test 'EvenOdd6' {
        test: {
            [14, 0] |> EvenOdd.doit
        }
        expected: 'even'
    }

    test 'EvenOdd7' {
        test: {
            [15, 0] |> EvenOdd.doit
        }
        expected: 'odd'
    }

    test 'EvenOdd8' {
        test: {
            EvenOdd.EvenCount
        }
        expected: 4
    }

    test 'EvenOdd9' {
        test: {
            EvenOdd.OddCount
        }
        expected: 3
    }
}

