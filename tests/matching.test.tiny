##################################################################
#
# TinyTest test suite to test using the match statement
#
##################################################################

import 'utils'
import 'tinytestutils'
import 'math'

suite 'MatchScalarTests' {

    # Test literal list matching
    test 'AND_Match_test' {
        test: {
            fn test_and x y ->
                 match [x, y]
                | [true,  true]  -> true
                | [true,  false] -> false
                | [false, true]  -> false
                | [false, false] -> false

           test_and(false, false) == false &&
           test_and(false, true)  == false &&
           test_and(true,  false) == false &&
           test_and(true,  true)  == true
       }

       Expected: true
    }

    test 'OR_Match_test' {
        test: {
            fn test_or x y ->
                 match [x, y]
                | [true,  true]  -> true
                | [true,  false] -> true
                | [false, true]  -> true
                | [false, false] -> false

                test_or(false, false) == false &&
                test_or(false, true)  == true  &&
                test_or(true,  false) == true  &&
                test_or(true,  true)  == true
        }

        expected: true
    }
}

suite 'MatchListTests' {

    ######################################################
    # Test matching list lengths
    test 'MatchingListLengths1' {
        test: {
            foreach (list in [[1,2,3], [1,2], [1], []]) {
                match list
                | _::_::_::_ -> 3
                | _::_::_ -> 2
                | _::_ -> 1
                | [] -> 0
                | -> "default"
            }
        }

        Expected: [3, 2, 1, 0]
    }

    # Test matching list lengths but with matchlist instead of foreach
    test 'MatchingListLengths2' {
        test: {
            matchlist [[1,2,3], [1,2], [1], []]
                | _::_::_::_ -> 3
                | _::_::_ -> 2
                | _::_ -> 1
                | [] -> 0
                | -> "default"
        }

        Expected: [3, 2, 1, 0]
    }
}

suite 'Multiple_Match_Patterns' {

    test 'SimpleIntegerMatch' {
        test: {
                matchlist [1..10]
                # match the odd numbers except for 9
                | 1 | 3 | 5 | 7 -> 'odd'
                # match the even numbers except for 4
                | 2 | 6 | 8 | 10 -> 'even'
                # unmatched numbers are unknown.
                | -> 'unknown'
        }
        expected: [ 'odd', 'even', 'odd', 'unknown', 'odd', 'even', 'odd', 'even', 'unknown', 'even' ]
    }

    test 'MultipleTypePatterns' {
        test: {
            matchlist [1, 'a', {}, 2, 'c', {}]
            | [<int>] | [<IDictionary>] -> 'not string'
            | [<string>] -> 'string'
            | -> throw 'Match failed'
        }
        expected: ['not string', 'string', 'not string', 'not string', 'string', 'not string']
    }

    test 'MultipleRegexPatterns' {
        test: {
            matchlist ['a', 'b', 'c', 'd', 'ab', 'ac']
            | r/a/ | r/b/ -> 'ab'
            | r/a/ | r/c/ -> 'ac'
            | -> 'other'
        }
        expected: ['ab', 'ab', 'ac', 'other', 'ab', 'ab' ]
    }

    test 'MultiplePatternPatterns' {
        test: {
            matchlist [[10, 2], [20, 3], ['a', 4], ['b', 5]]
            | x::2::_ | x::3::_ -> x
            | y::4::_ | y::5::_ -> y
            | -> "default"
        }
        expected: [10, 20, 'a', 'b']
    }

    test 'MultipleLambdaPatterns' {
        test: {
            matchlist [1 .. 10]
            | {it < 4}  | {it > 7}  -> 'x'
            | {it == 4} | {it == 6} -> it
            | -> 'z'
        }
        expected: [ 'x', 'x', 'x', 4, 'z', 6, 'z', 'x', 'x', 'x' ]
    }

    test 'MultipleMixedPatterns' {
        test: {
            matchlist ['3abc', 18, 'xyz', 'hi', 13, {}, 77, 6, 3.14]
            | r/[0-9]abc/ | 18              -> 1
            | 'xyz' | 13                    -> 2
            | [<IDictionary>] | [<double>]  -> 3
            | [<string>] | {it % 2 == 0}    -> 4
            | [<int>]                       -> 5
            | -> throw "Error - no match for " + it
        }
        expected: [ 1, 1, 2, 4, 2, 3, 5, 4, 3]
    }
}

